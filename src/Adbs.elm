module Adbs exposing (ad2bs, miti)

import Dict
import Date


type alias Miti =
    { year : Int
    , month : Int
    , day : Int
    }


miti year month day =
    { year = year
    , month = month
    , day = day
    }


bs_equiv =
    miti 2000 9 17


ad_equiv =
    miti 1944 1 1


calendarData =
    Dict.fromList
        [ ( 1978, [ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 1979, [ 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 1980, [ 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366 ] )
        , ( 1981, [ 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30, 365 ] )
        , ( 1982, [ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 1983, [ 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 1984, [ 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366 ] )
        , ( 1985, [ 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30, 365 ] )
        , ( 1986, [ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 1987, [ 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 1988, [ 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366 ] )
        , ( 1989, [ 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 1990, [ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 1991, [ 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 1992, [ 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 366 ] )
        , ( 1993, [ 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 1994, [ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 1995, [ 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30, 365 ] )
        , ( 1996, [ 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 366 ] )
        , ( 1997, [ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 1998, [ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 1999, [ 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366 ] )
        , ( 2000, [ 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 365 ] )
        , ( 2001, [ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 2002, [ 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 2003, [ 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366 ] )
        , ( 2004, [ 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 365 ] )
        , ( 2005, [ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 2006, [ 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 2007, [ 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366 ] )
        , ( 2008, [ 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31, 365 ] )
        , ( 2009, [ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 2010, [ 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 2011, [ 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366 ] )
        , ( 2012, [ 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30, 365 ] )
        , ( 2013, [ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 2014, [ 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 2015, [ 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366 ] )
        , ( 2016, [ 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30, 365 ] )
        , ( 2017, [ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 2018, [ 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 2019, [ 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 366 ] )
        , ( 2020, [ 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 2021, [ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 2022, [ 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30, 365 ] )
        , ( 2023, [ 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 366 ] )
        , ( 2024, [ 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 2025, [ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 2026, [ 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366 ] )
        , ( 2027, [ 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 365 ] )
        , ( 2028, [ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 2029, [ 31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 2030, [ 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366 ] )
        , ( 2031, [ 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 365 ] )
        , ( 2032, [ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 2033, [ 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 2034, [ 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366 ] )
        , ( 2035, [ 30, 32, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31, 365 ] )
        , ( 2036, [ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 2037, [ 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 2038, [ 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366 ] )
        , ( 2039, [ 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30, 365 ] )
        , ( 2040, [ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 2041, [ 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 2042, [ 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366 ] )
        , ( 2043, [ 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30, 365 ] )
        , ( 2044, [ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 2045, [ 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 2046, [ 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366 ] )
        , ( 2047, [ 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 2048, [ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 2049, [ 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30, 365 ] )
        , ( 2050, [ 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 366 ] )
        , ( 2051, [ 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 2052, [ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 2053, [ 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30, 365 ] )
        , ( 2054, [ 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 366 ] )
        , ( 2055, [ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 2056, [ 31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 2057, [ 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366 ] )
        , ( 2058, [ 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 365 ] )
        , ( 2059, [ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 2060, [ 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 2061, [ 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366 ] )
        , ( 2062, [ 30, 32, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31, 365 ] )
        , ( 2063, [ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 2064, [ 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 2065, [ 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366 ] )
        , ( 2066, [ 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31, 365 ] )
        , ( 2067, [ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 2068, [ 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 2069, [ 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366 ] )
        , ( 2070, [ 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30, 365 ] )
        , ( 2071, [ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 2072, [ 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 2073, [ 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366 ] )
        , ( 2074, [ 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 2075, [ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 2076, [ 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30, 365 ] )
        , ( 2077, [ 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 366 ] )
        , ( 2078, [ 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 2079, [ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365 ] )
        , ( 2080, [ 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30, 365 ] )
        , ( 2081, [ 31, 31, 32, 32, 31, 30, 30, 30, 29, 30, 30, 30, 366 ] )
        , ( 2082, [ 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30, 365 ] )
        , ( 2083, [ 31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30, 365 ] )
        , ( 2084, [ 31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30, 365 ] )
        , ( 2085, [ 31, 32, 31, 32, 30, 31, 30, 30, 29, 30, 30, 30, 366 ] )
        , ( 2086, [ 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30, 365 ] )
        , ( 2087, [ 31, 31, 32, 31, 31, 31, 30, 30, 29, 30, 30, 30, 366 ] )
        , ( 2088, [ 30, 31, 32, 32, 30, 31, 30, 30, 29, 30, 30, 30, 365 ] )
        , ( 2089, [ 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30, 365 ] )
        , ( 2090, [ 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30, 365 ] )
        , ( 2091, [ 31, 31, 32, 31, 31, 31, 30, 30, 29, 30, 30, 30, 366 ] )
        , ( 2092, [ 31, 31, 32, 32, 31, 30, 30, 30, 29, 30, 30, 30, 366 ] )
        ]



--bs2ad : String -> String
--bs2ad bs =
--bs


{-| Coverts string in the AD calendar to BS calendar format
-}
ad2bs : String -> Maybe Miti
ad2bs ad =
    verifyDate ad
        |> Maybe.andThen (countAdDays ad_equiv)
        |> Maybe.andThen (addDaysToBS bs_equiv)


{-| Recursively adds days to a BS Date
first adds years,
then months,
finally the days
-}
addDaysToBS : Miti -> Int -> Maybe Miti
addDaysToBS miti days =
    let
        monthsInCurrentYear =
            Dict.get miti.year calendarData
                |> Result.withDefault []
    in
        if (length monthsInCurrentYear) > 0 then
            Just miti
        else
            Nothing



-- TODO magic


{-| Counts the number of days between two AD dates
Expects the date to be proper,
else returns a diff from the epoch
-}
countAdDays : Miti -> Miti -> Maybe Int
countAdDays startMiti endMiti =
    let
        startDate =
            Date.fromString (mitiToString startMiti)
                |> Result.withDefault (Date.fromTime 0)
                |> Date.toTime

        endDate =
            Date.fromString (mitiToString endMiti)
                |> Result.withDefault (Date.fromTime 0)
                |> Date.toTime
    in
        if (endDate == 0) || (startDate == 0) then
            Nothing
        else
            (endDate - startDate)
                / (1000 * 60 * 60 * 24)
                |> floor
                |> Just


{-| Verify if a date is for a year/month/day format
and fits in the required range of year, months and days.
This is just a semantic check. It doesn't check if the date
is a real date or not.
-}
verifyDate : String -> Maybe Miti
verifyDate date =
    case (String.split "/" date) of
        [ year, month, day ] ->
            verifyDateParams year month day

        _ ->
            Nothing


verifyDateParams : String -> String -> String -> Maybe Miti
verifyDateParams yearString monthString dayString =
    let
        year =
            Result.withDefault 0 (String.toInt yearString)

        month =
            Result.withDefault 0 (String.toInt monthString)

        day =
            Result.withDefault 0 (String.toInt dayString)
    in
        if year > 1978 && year < 2093 && month > 0 && month < 13 && day > 0 && day < 32 then
            Just (miti year month day)
        else
            Nothing


mitiToString : Miti -> String
mitiToString miti =
    (toString miti.year) ++ "/" ++ (toString miti.month) ++ "/" ++ (toString miti.day)
